Hi Nimrod,

Your exercise is to implement a Non Blocking Producer/Consumer stream processing service that exposes an HTTP api.



You are provided with a blackbox executable that spits out an infinite stream of lines of event data encoded in JSON. You can download it here:



* Linux -

https://s3-us-west-1.amazonaws.com/bp-interview-artifacts/generator-linux-amd64



Service Requirements


    It should consume the output of the generator and gather the following stats:
    A count of events by event type.
    A count of words encountered in the data field of the events. (e.g. “the” → 32, “me” → 5)
    It should expose these stats in an HTTP interface.
    Stream may encounter corrupt JSON lines and should handle such events well and without interruption.


Important Notes


Please read thoroughly as it may affect your submission!



    We are looking for simple readable code which is not over-engineered.
    The design of your solution should decouple the reads from the writes. Try to think on what it means when scaling such a service.
    You can implement this exercise in either Java or Scala.
    The task should take no more than 2-3 hours.
    If you already know some reactive framework (For example: RXJava, RxScala, Play, Akka, VertX, Reactor or anything similar) use what you know! if you don't know any of these frameworks read a bit and understand what your implementation can benefit from these proposed frameworks.
    Add a README file with instructions on running the project. In the README file, please note 3 things you would improve in your submission.


Task Submission


Once Done, please create a Github repo and send us a link.



